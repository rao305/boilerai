// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailNormalized   String    @unique // Lowercase, trimmed version
  name              String?
  image             String?
  emailVerified     DateTime?
  
  // Azure AD specific fields
  azureId           String?   @unique // Azure object ID
  tenantId          String?
  upn               String? // User Principal Name
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  auditLogs         AuditLog[]
  magicLinks        MagicLink[]
  
  @@map("users")
  @@index([emailNormalized])
  @@index([azureId])
  @@index([tenantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  // Azure AD specific
  tenant_id         String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Additional session metadata
  ipAddress    String? // IPv6 support
  userAgent    String?
  isActive     Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
  @@index([sessionToken])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  // Token type for different verification purposes
  type       String   @default("email") // email, password_reset, etc.
  
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@index([token])
  @@index([expires])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  role        String   @default("student") // student, faculty, staff, admin
  department  String?
  year        String? // For students: freshman, sophomore, etc.
  
  // Preferences
  preferences String   @default("{}")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
  @@index([userId])
  @@index([role])
}

// Optional magic link fallback (feature-flagged)
model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expires   DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  
  // Rate limiting
  ipAddress String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("magic_links")
  @@index([token])
  @@index([email])
  @@index([expires])
  @@index([ipAddress])
}

// Audit logging for security
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String // login, logout, failed_login, password_change, etc.
  details   String?
  ipAddress String?
  userAgent String?
  success   Boolean  @default(true)
  
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([ipAddress])
}

// Rate limiting storage
model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or email
  attempts  Int      @default(1)
  resetTime DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rate_limits")
  @@index([key])
  @@index([resetTime])
}